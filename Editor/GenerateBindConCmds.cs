using System.IO;
using System.Text.RegularExpressions;

public static class GenerateBindConCmds
{
	[Menu("Editor", "Generate/bind ConCmds")]
	public static void Generate_bind_ConCmds()
	{
		var codePath = Project.Current?.GetCodePath();

		if (string.IsNullOrWhiteSpace(codePath))
		{
			Log.Error($"Failed to get code path for project :(");
			return;
		}

		var localFolderPath = "Generated";
		var fileName = "Generated_SetBindsConCmds";
		var fileExtension  = "cs";

		var directory = $"{codePath}/{localFolderPath}";
		var filePath = $"{directory}/{fileName}.{fileExtension}";

		if (!Directory.Exists(directory))
		{
			Directory.CreateDirectory(directory);
		}

		var lines = new List<string>();
		var indent = "	";

		lines.Add("// This class is auto generated by GenerateBindConCmds::Generate_bind_ConCmds()");
		lines.Add("public static class SetBindsConCmds");
		lines.Add("{");

		lines.Add($"{indent}[ConCmd(\"resetbinds\")]");
		lines.Add($"{indent}public static void resetbinds()");
		lines.Add($"{indent}{{");
		lines.Add($"{indent}{indent}IGameInstance.Current.ResetBinds();");
		lines.Add($"{indent}{indent}IGameInstance.Current.SaveBinds();");
		lines.Add($"{indent}}}");

		lines.Add("");

		lines.Add($"{indent}[ConCmd(\"dumpbinds\")]");
		lines.Add($"{indent}public static void dumpbinds()");
		lines.Add($"{indent}{{");
		lines.Add($"{indent}{indent}foreach (var action in Input.GetActions())");
		lines.Add($"{indent}{indent}{{");
		lines.Add($"{indent}{indent}string boundButtonName = IGameInstance.Current.GetBind(action.Name, out bool isDefault, out bool isCommon);");
		lines.Add($"{indent}{indent}Log.Info($\"The '{{action.Name}}' action is bound to '{{boundButtonName}}'{{(isDefault ? \" (Default binding)\" : \"\")}}{{(isCommon ? \" (Common binding)\" : \"\")}}\");");
		lines.Add($"{indent}{indent}}}");
		lines.Add($"{indent}}}");

		foreach (var action in Sandbox.Input.GetActions())
		{
			var safeMethodName = Regex.Replace(action.Name, "[^a-zA-Z0-9_]", "");

			lines.Add("");

			lines.Add($"{indent}[ConCmd(\"setbind_{safeMethodName}\")]");
			lines.Add($"{indent}public static void setbind_{safeMethodName}(string buttonName)");
			lines.Add($"{indent}{{");
			lines.Add($"{indent}{indent}IGameInstance.Current.SetBind(\"{action.Name}\", buttonName);");
			lines.Add($"{indent}{indent}IGameInstance.Current.SaveBinds();");
			lines.Add($"{indent}}}");

			lines.Add("");

			lines.Add($"{indent}[ConCmd(\"getbind_{safeMethodName}\")]");
			lines.Add($"{indent}public static void getbind_{safeMethodName}()");
			lines.Add($"{indent}{{");
			lines.Add($"{indent}{indent}string boundButtonName = IGameInstance.Current.GetBind(\"{action.Name}\", out bool isDefault, out bool isCommon);");
			lines.Add($"{indent}{indent}Log.Info($\"The '{action.Name}' action is bound to '{{boundButtonName}}'{{(isDefault ? \" (Default binding)\" : \"\")}}{{(isCommon ? \" (Common binding)\" : \"\")}}\");");
			lines.Add($"{indent}}}");

			//Log.Info($"action: {action.Name}, {action.KeyboardCode}, {action.GroupName}");
		}

		lines.Add("}");

		if (File.Exists(filePath))
		{
			File.Delete(filePath);
		}

		File.WriteAllLines(filePath, lines);
		Log.Info($"Bind Commands generated at '{filePath}'");
	}
}