@using Sandbox;
@using Sandbox.UI;
@using Sandbox.Audio;
@using System;
@inherits PanelComponent

<root>
	<label style="color: rgba(255, 255, 255, @alphaLevelName); font-size: @GetLevelNameFontSize();">@GetLevelName()</label>
	<label style="color: rgba(255, 255, 255, @alpha);">@message</label>
</root>

@code
{
	string message = "3";
	float alphaLevelName = 1.0f;
	float alpha = 1.0f;

	bool fadeOutHasStarted = false;
	TimeUntil fadeOut;

	int hashCounter = 0;
	int lastNumber = -1;

	string GetLevelName()
	{
		if (LevelData.active == null)
		{
			return "";
		}

		return LevelData.active.friendlyLevelName;
	}

	string GetLevelNameFontSize()
	{
		int perfectSize = 400; // px
		int perfectLength = 16;

		float currentScale = (float)GetLevelName().Replace(" ", "").Length / (float)perfectLength;
		float resultScale = perfectSize * (currentScale > 1f ? 1f - currentScale : 1f + currentScale);

		string scaleStr = MathX.Clamp(resultScale, 100, 250).ToFixed(2) + "px";

		//Log.Info($"Title currentScale: {currentScale}, resultScale: {resultScale}, font-size: {scaleStr}");

		return scaleStr;
	}

	protected override void OnUpdate()
	{
		base.OnUpdate();

		hashCounter++;

		if (GamePlayManager.instance == null)
		{
			return;	
		}

		float remainingCountdown = GamePlayManager.instance.countDownFinish.Relative;
		int wholeNumber = MathX.FloorToInt(remainingCountdown) + 1;

		if (wholeNumber < 1)
		{
			if (!fadeOutHasStarted)
			{
				message = "GO!";
				fadeOutHasStarted = true;
				float fadeOutTime = (UISettings.instance != null) ? UISettings.instance.goFadeOutTime : 1.0f;
				fadeOut = fadeOutTime;

				var soundHandle = Sound.Play("levelstart");
				soundHandle.TargetMixer = Mixer.FindMixerByName("UI");
			}

			alpha = 1.0f - fadeOut.Fraction;
			alphaLevelName = alpha;

			if (fadeOut)
			{
				this.Enabled = false;
				return;
			}
			return;
		}

		message = wholeNumber.ToString();
		float remainder = remainingCountdown - (wholeNumber-1);

		if (UISettings.instance == null)
		{
			alpha = 1.0f;
			return;
		}

		alpha = UISettings.instance.countdownCurve.Evaluate(1.0f - remainder);

		if (wholeNumber != lastNumber)
		{
			lastNumber = wholeNumber;

			float pitch = 1.0f;

			if (wholeNumber == 3) pitch = 0.70f;
			if (wholeNumber == 2) pitch = 0.85f;
			if (wholeNumber == 1) pitch = 1.0f;

			var soundHandle2 = Sound.Play("countdown");
			soundHandle2.TargetMixer = Mixer.FindMixerByName("UI");

			soundHandle2.Pitch = pitch;

		}
	}

	protected override int BuildHash() => System.HashCode.Combine(hashCounter);
}