@using Sandbox;
@using Sandbox.UI;
@using System;
@inherits PanelComponent

<root>
	<div @ref=ProgressBar class="pbar-container">
		<div @ref=ProgressValue class="pbar-progress">
		</div>
	</div>
	<div class="title">@GetRemainingReactTime()</div>
</root>

@code
{
	protected Panel ProgressBar;
	protected Panel ProgressValue;

	private float _Progress = 0.5f;
	[Property, Range(0,1)]
	public float Progress
	{
		get => _Progress;
		set {
			_Progress = value;
			var Width = Length.Parse($"{value * 100}%");
			if (ProgressValue != null)
			{
				ProgressValue.Style.Width = Width;

				// ProgressValue.SetClass("green", false);
				// ProgressValue.SetClass("amber", false);
				// ProgressValue.SetClass("red",   false);

				// if (value >= 0.5f) ProgressValue.SetClass("green", true);
				// else if (value >= 0.25f) ProgressValue.SetClass("amber", true);
				// else ProgressValue.SetClass("red", true);

				ProgressValue.Style.BackgroundColor = GetLerpedProgressValueColor(value);
			}
		}
	}

	string GetLerpedProgressValueColor(float progress)
	{
		var ColorGreen = new Color(0, 255, 0);
		var ColorAmber = new Color(255, 215, 0);
		var ColorRed = new Color(255, 0, 0);

		Color ColorResult;

		if (progress < 0.5f) ColorResult = Color.Lerp(ColorRed, ColorAmber, progress / 0.5f);
		else ColorResult = Color.Lerp(ColorAmber, ColorGreen, (progress - 0.5f) / 0.5f);

		return ColorResult.Rgba;
	}

	float GetMsTime()
	{
		// If not visible just use current time for now...
		if (!IsBarVisible()) return 1000 - ((DateTime.Now.Ticks / TimeSpan.TicksPerMillisecond) % 1000);

		return GetRemainingReactTime() % 1000;
	}

	float GetRemainingReactTime()
	{
		if (!IsBarVisible()) return 0f; // Bit of a hack

		float timeSpentMakingDecision = Player.instance.timeSinceStartedDecisionMaking;
		float maxReactTime = RoomManager.instance.currentRoom.reactTime;
		float remainingReactTime = maxReactTime - timeSpentMakingDecision;
		remainingReactTime = remainingReactTime.Clamp(0, maxReactTime);

		return remainingReactTime;
	}

	string GetRemainingReactTimeStr()
	{
		if (!IsBarVisible()) return " "; // Bit of a hack

		return $"{GetRemainingReactTime().ToString("0.00")}s";
	}

	float GetTimePercentage()
	{
		if (!IsBarVisible()) return 1f;

		float timeSpentMakingDecision = Player.instance.timeSinceStartedDecisionMaking;
		float maxReactTime = RoomManager.instance.currentRoom.reactTime;
		float remainingReactTime = maxReactTime - timeSpentMakingDecision;

		return MathX.LerpInverse(remainingReactTime, 0.0f, maxReactTime, true);
	}

	bool IsBarVisible()
	{
		if (Player.instance.state != PlayerState.Deciding || RoomManager.instance == null)
		{
			return false;
		}

		return true;
	}


	private Random Rnd = new Random();
	[Property]
	public float ShakeDistanceMinSoft = 15f;
	[Property]
	public float ShakeDistanceMaxSoft = 20f;
	[Property]
	public float ShakeDistanceMinHard = 2f;
	[Property]
	public float ShakeDistanceMaxHard = 15f;
	[Property]
	public float ShakeMinSpeed = 25f;
	[Property]
	public float ShakeMaxSpeed = 150f;

	public float ShakeTransformLastX = 0;
	public float ShakeTransformLastY = 0;
	public float ShakeTransformNextX = 0;
	public float ShakeTransformNextY = 0;

	public DateTime ShakeExpires = DateTime.Now;

	[Property]
	public float PulseScaleValue = 1f;
	[Property]
	public float PulseScaleMax = 1.1f;
	[Property]
	public float PulseScaleMin = 1.0f;

	[Property]
	public float TwistValue = 0f;
	[Property]
	public float TwistMax = 1f;
	[Property]
	public float TwistMin = -1f;

	protected void UpdatePulse()
	{
		// Divide into 4 to make it breathe
		var val = 1 - (GetMsTime() / (1000 / 4));
		if (val >= 0.5) val = 1 - val;

		PulseScaleValue = MathX.Lerp(PulseScaleMin, PulseScaleMax, val);
		//Log.Info($"ms={GetMsTime()}, pos={val}, val={PulseScaleValue}");
	}

	protected void UpdateTwist()
	{
		// float val = GetMsTime() / 1000;
		// Log.Info($"Value={val}, sin={MathF.Sin(val * MathF.PI)}");
		// TwistValue = MathX.Lerp(TwistMin, TwistMax, MathF.Sin(val * MathF.PI));
	}

	protected void UpdateShake()
	{
		var ShakeProgress = 1f - (_Progress / 0.99f);
		var ShakeApproachTime = MathX.Lerp(ShakeMinSpeed, ShakeMaxSpeed, ShakeProgress) * Time.Delta;
		var ShakeDistanceMin = (int)MathX.Lerp(ShakeDistanceMinSoft, ShakeDistanceMinHard, ShakeProgress);
		var ShakeDistanceMax = (int)MathX.Lerp(ShakeDistanceMaxSoft, ShakeDistanceMaxHard, ShakeProgress);

		if (_Progress > 0.99f)
		{
			// Log.Info("No shake");
			if (ProgressBar != null) ProgressBar.Style.Transform = null;
			return;
		}
		//Log.Info($"Shake p={ShakeProgress} t={MathX.Lerp(5000, 10, ShakeProgress)}ms");

		if (DateTime.Now > ShakeExpires) {
			ShakeExpires = new DateTime(
				DateTime.Now.Ticks +
				TimeSpan.FromMilliseconds(MathX.Lerp(250, 1, ShakeProgress)).Ticks
			);

			var NextX = ShakeTransformNextX;
			var NextY = ShakeTransformNextY;

			ShakeTransformNextX = Rnd.Next(-(ShakeDistanceMin / 2), (ShakeDistanceMax / 2));
			ShakeTransformNextY = Rnd.Next(-(ShakeDistanceMin / 2), (ShakeDistanceMax / 2));
			//Log.Info($"Update Shake x={NextX}=>{ShakeTransformNextX}, y={NextY}=>{ShakeTransformNextY}");
		}

		//if (ProgressBar != null)
		{
			var LastX = ShakeTransformLastX;
			var LastY = ShakeTransformLastY;
			ShakeTransformLastX = MathX.Clamp(MathX.Approach(ShakeTransformLastX, ShakeTransformNextX, ShakeApproachTime), -(ShakeDistanceMax / 2), (ShakeDistanceMax / 2));
			ShakeTransformLastY = MathX.Clamp(MathX.Approach(ShakeTransformLastY, ShakeTransformNextY, ShakeApproachTime), -(ShakeDistanceMax / 2), (ShakeDistanceMax / 2));
			// Log.Info($"Approach shake value x={LastX}=>{ShakeTransformLastX}, y={LastY}=>{ShakeTransformLastY}");
		}
	}

	protected override void OnUpdate()
	{
		bool Prod = false;
		bool Visible = (Prod ? IsBarVisible() : true);
		this.Panel.Style.Display = (Visible ? DisplayMode.Flex : DisplayMode.None);

		var _Progress = GetTimePercentage();

		if (Visible && Prod) Progress = _Progress;

		UpdateShake();
		UpdatePulse();
		UpdateTwist();

		if (ProgressBar != null)
		{
			// Finally update the transforms...
			var PBTransform = new PanelTransform();
			PBTransform.AddTranslate(
				Length.Parse($"{(int)ShakeTransformLastX}px"),
				Length.Parse($"{(int)ShakeTransformLastY}px")
			);
			//Log.Info(PulseScaleValue);
			PBTransform.AddScale(PulseScaleValue);
			// PBTransform.AddRotation(0, 0, TwistValue);
			ProgressBar.Style.Transform = PBTransform;
		}
	}

	protected override int BuildHash() => System.HashCode.Combine(GetRemainingReactTime());
}
