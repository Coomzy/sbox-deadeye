@using Sandbox;
@using Sandbox.Audio;
@using Sandbox.UI;
@using Sandbox.Services;
@using System;
@inherits PanelComponent

<root class="menu translucent-bg stretched">
    <div class="container">
        <div class="buttons">
            <div class="button-bg">
                <div class="button red singular" onclick="@(() => ButtonBack())">Back</div>
            </div>
        </div>
        <div class="content bg">
            <div class="title">
                <span>Settings</span>
            </div>
            <div class="table">

                <div class="row title">
                    <div class="label">Gameplay</div>
                </div>            
                <div class="row setting">
                    <div class="column key">
                        <div class="label">Restart Level On Fail:</div>
                    </div>
                    <div class="column value">
                        <div class="buttons">
                            <div class="button @restartLevelOnFailColorOff" onclick="@(() => SetRestartLevelOnFail(false))">Off</div>
                            <div class="button @restartLevelOnFailColorOn" onclick="@(() => SetRestartLevelOnFail(true))">On</div>
                        </div>
                    </div>
                </div>
                <div class="row setting">
                    <div class="column key">
                        <div class="label">Restart Level On Civilian Killed:</div>
                    </div>
                    <div class="column value">
                        <div class="buttons">
                            <div class="button @restartLevelOnCivKillColorOff" onclick="@(() => SetRestartLevelOnCivKill(false))">Off</div>
                            <div class="button @restartLevelOnCivKillColorOn" onclick="@(() => SetRestartLevelOnCivKill(true))">On</div>
                        </div>
                    </div>
                </div>
                <div class="row title">
                    <div class="label">Clothing</div>
                </div>
                <div class="row setting">
                    <div class="column key">
                        <div class="label">Use Personal Clothing:</div>
                    </div>
                    <div class="column value">
                        <div class="buttons">
                            <div class="button @useOriginalClothingColorOff" onclick="@(() => SetUseOriginalClothing(false))">Off</div>
                            <div class="button @useOriginalClothingColorOn" onclick="@(() => SetUseOriginalClothing(true))">On</div>
                        </div>
                    </div>
                </div>
                <div class="row title">
                    <div class="label">Volume</div>
                </div>
                <div class="row setting mute">
                    <div class="column key">
                        <div class="label">Mute Music:</div>
                    </div>
                    <div class="column value">
                        <div class="buttons">
                            <div class="button @muteMusicOff singular" onclick="@(() => SetMuteMusic(false))">Off</div>
                            <div class="button @muteMusicOn singular" onclick="@(() => SetMuteMusic(true))">On</div>
                        </div>
                    </div>
                </div>
                <div class="row setting volume game">
                    <div class="column key">
                        <div class="slider-label">Game Volume:</div>
                    </div>
                    <div class="column value">
                        <div class="slider">
                            <SliderControl Value="@(gameSliderValue)" OnValueChanged="@(OnGameSliderChange)" Min="@(0)" Max="@(1)" Step="@(0.1f)"></SliderControl>
                        </div>
                    </div>
                </div>
                <div class="row setting volume music @isMusicDisabled">
                    <div class="column key">
                        <div class="slider-label">Music Volume:</div>
                    </div>
                    <div class="column value">
                        <div class="slider">
                            <SliderControl Value="@(musicSliderValue)" OnValueChanged="@(OnMusicSliderChange)" Min="@(0)" Max="@(1)" Step="@(0.1f)"></SliderControl>
                        </div>
                    </div>
                </div>
                <div class="row setting volume ui">
                    <div class="column key">
                         <div class="slider-label">UI Volume:</div>
                    </div>
                    <div class="column value">
                        <div class="slider">
                            <SliderControl Value="@(uiSliderValue)" OnValueChanged="@(OnUISliderChange)" Min="@(0)" Max="@(1)" Step="@(0.1f)"></SliderControl>
                        </div>
                    </div>
                </div>
                
            </div>
        </div>
    </div>
</root>

@code
{
    string restartLevelOnFailColorOff => GamePreferences.instance.restartLevelOnFail ? "gray" : "red";
    string restartLevelOnFailColorOn => GamePreferences.instance.restartLevelOnFail ? "green" : "gray";

    string restartLevelOnCivKillColorOff => GamePreferences.instance.restartLevelOnCivKill ? "gray" : "red";
    string restartLevelOnCivKillColorOn => GamePreferences.instance.restartLevelOnCivKill ? "green" : "gray";

    string useOriginalClothingColorOff => GamePreferences.instance.useOriginalClothing ? "gray" : "red";
    string useOriginalClothingColorOn => GamePreferences.instance.useOriginalClothing ? "green" : "gray";

    string muteMusicOff => GamePreferences.instance.muteMusic ? "gray" : "red";
    string muteMusicOn => GamePreferences.instance.muteMusic ? "green" : "gray";
    string isMusicDisabled => GamePreferences.instance.muteMusic ? "disabled" : "enabled";

    float gameSliderValue = 0.5f;
    float musicSliderValue = 0.5f;
    float uiSliderValue = 0.5f;

    protected override void OnAwake()
    {
        base.OnAwake();

        gameSliderValue = GamePreferences.instance.gameVolume;
        musicSliderValue = GamePreferences.instance.musicVolume;
        uiSliderValue = GamePreferences.instance.uiVolume;
    }

    void ButtonBack()
    {
        MainMenu.instance.SetMenuState(MenuState.Main);
        var soundHandle = Sound.Play("ui.navigate.back");
        soundHandle.TargetMixer = Mixer.FindMixerByName("UI");
    }

    void OnGameSliderChange(float value)
    {
        GamePreferences.instance.gameVolume = value;
        GamePreferences.instance.ApplyVolumesToMixers();
        GamePreferences.instance.Save();
    }

    void OnMusicSliderChange(float value)
    {
        GamePreferences.instance.musicVolume = value;
        GamePreferences.instance.ApplyVolumesToMixers();
        GamePreferences.instance.Save();
    }

    void OnUISliderChange(float value)
    {
        GamePreferences.instance.uiVolume = value;
        GamePreferences.instance.ApplyVolumesToMixers();
        GamePreferences.instance.Save();
    }
    
    void SetRestartLevelOnFail(bool enabled)
    {
        GamePreferences.instance.restartLevelOnFail = enabled;
        GamePreferences.instance.Save();
        var soundHandle = Sound.Play("ui.button.press");
        soundHandle.TargetMixer = Mixer.FindMixerByName("UI");
    }

    void SetRestartLevelOnCivKill(bool enabled)
    {
        GamePreferences.instance.restartLevelOnCivKill = enabled;
        GamePreferences.instance.Save();
        var soundHandle = Sound.Play("ui.button.press");
        soundHandle.TargetMixer = Mixer.FindMixerByName("UI");
    }

    void SetUseOriginalClothing(bool enabled)
    {
        GamePreferences.instance.UseOriginalClothing(enabled);
        var soundHandle = Sound.Play("ui.button.press");
        soundHandle.TargetMixer = Mixer.FindMixerByName("UI");
    }

    void SetMuteMusic(bool enabled)
    {
        GamePreferences.instance.MuteMusic(enabled);
        var soundHandle = Sound.Play("ui.button.press");
        soundHandle.TargetMixer = Mixer.FindMixerByName("UI");
    }

    /// <summary>
    /// update every second
    /// </summary>
    protected override int BuildHash() => System.HashCode.Combine(RealTime.Now.CeilToInt());
}