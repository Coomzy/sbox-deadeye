@using Sandbox;
@using Sandbox.Audio;
@using Sandbox.UI;
@using Sandbox.Services;
@using Sandbox.Utility;
@using System;
@using Sandbox.UI.Menu.Helpers;

@inherits PanelComponent

<root class="@GetMenuClass()">
    <div class="container">
        <!--<div class="buttons">
            <div class="button-bg">
                <div class="button cowboy singular" onclick="@(() => ButtonBack())">Back</div>
            </div>
        </div>-->
		<div class="content bg">
	        <div class="title">
                <span>@GetNamedLeaderboardTitle()</span>
	        </div>
            <div class="table controller">
                <div class="row">
                    <div class="column">
                        @* Previous button *@
                        <span class="arrow prev @(CanLeaderboardMoveLeft ? "" : "disabled")" onclick="@(() => MoveLeaderboardLeft())">
                            @if (Input.UsingController)
                            {
                                <InputGlyph button="Previous" size="Medium" style="Dark" />
                            } else {
                                <span class="char">&larr;</span>
                            }
                            <span class="text">Previous</span>
                        </span>
                    </div>
                    <div class="column">
                        <h1>@GetLeaderboardTitle()</h1>
                    </div>
                    <div class="column">
                        @* Next button *@
                        <span class="arrow next @(CanLeaderboardMoveRight ? "" : "disabled")" onclick="@(() => MoveLeaderboardRight())">
                            <span class="text">Next</span>
                            @if (Input.UsingController) {
                                <InputGlyph button="Next" size="Medium" style="Dark"/>
                            } else {
                            <span class="char">&rarr;</span>
                            }
                        </span>
                    </div>
                </div>
            </div>
            <div class="table">
                <div class="row header">
                    <div class="column rank">Rank</div>
                    <div class="column name">Name</div>
                    <div class="column time">Time</div>
                    @*<div class="column lowest-medal">Lowest Medal</div>*@
                </div>
                @if (Leaderboards == null) {
                    <div class="row error">
                        <div class="column">
                            <span>Cannot retrieve leaderboards due to an invalid configuration</span>
                        </div>
                    </div>
                    <div class="buttons">
                        <div class="button-bg">
                            <div class="button cowboy singular" onclick="@(() => ButtonBack())">                                
					            @if (Input.UsingController)
					            {
						            <InputGlyph button="Back" />
					            }
                                Back
                            </div>
                        </div>
                    </div>
                    return;
                }

                @if (Leaderboards.isRefreshing && (DateTime.Now.Ticks - LastRetrievingState.Ticks) > TimeSpan.FromSeconds(30).Ticks)
                {
                    Leaderboards.Cancel();
                    <div class="row error">
                        <div class="column">
                            <span>Sorry. We cannot retrieve any leaderboard information at this time (Timed Out)</span>
                        </div>
                    </div>
                    <div class="row">
                        <div class="column">
                            <div class="button red" onclick="@(() => RetrieveLeaderboard(true))">Try again?</div>
                        </div>
                    </div>
                    <div class="buttons">
                        <div class="button-bg">
                            <div class="button cowboy singular" onclick="@(() => ButtonBack())">                                
					            @if (Input.UsingController)
					            {
						            <InputGlyph button="Back" />
					            }
                                Back
                            </div>
                        </div>
                    </div>
                    return;
                }

                @if (Leaderboards.isRefreshing)
                {
                    <div class="row refreshing">
                        <div class="column">
                            <span class="status">Refreshing</span>
                            <span class="icon refresh" style="transform: rotate(@(RefreshRotation)deg, 0, 0) translate(0px, @(RefreshYLocation)px);">⟳</span>
                        </div>
                    </div>
                    <div class="buttons">
                        <div class="button-bg">
                            <div class="button cowboy singular" onclick="@(() => ButtonBack())">                                
					            @if (Input.UsingController)
					            {
						            <InputGlyph button="Back" />
					            }
                                Back
                            </div>
                        </div>
                    </div>
                    return;
                }

                @if (Leaderboards.board == null)
                {
                    <div class="row error">
                        <div class="column">
                            <span>There was an error fetching the results</span>
                        </div>
                    </div>
                    <div class="row">
                        <div class="column">
                            <div class="button red small" onclick="@(() => RetrieveLeaderboard(true))">Try again?</div>
                        </div>
                    </div>
                    <div class="buttons">
                        <div class="button-bg">
                            <div class="button cowboy singular" onclick="@(() => ButtonBack())">                                
					            @if (Input.UsingController)
					            {
						            <InputGlyph button="Back" />
					            }
                                Back
                            </div>
                        </div>
                    </div>
                    return;
                }

                @if (Leaderboards.board.TotalEntries <= 0)
                {
                    <div class="row error">
                        <div class="column">
                            <span>No leaderboard data</span>
                        </div>
                    </div>
                    <div class="row">
                        <div class="column">
                            <div class="button red" onclick="@(() => RetrieveLeaderboard(true))">Try again?</div>
                        </div>
                    </div>
                    <div class="buttons">
                        <div class="button-bg">
                            <div class="button cowboy singular" onclick="@(() => ButtonBack())">                                
					            @if (Input.UsingController)
					            {
						            <InputGlyph button="Back" />
					            }
                                Back
                            </div>
                        </div>
                    </div>
                    return;
                }

                @foreach (var entry in Leaderboards.board.Entries)
                {
                    if (++row >= 10) break;
                    string specialClass = "";
                    if (entry.SteamId == (long)Steam.SteamId) specialClass = "me";

                    <div class="row @specialClass">
                        <div class="column row">@entry.Rank</div>
                        <div class="column name">@entry.DisplayName</div>
                        @*<div class="column time">@entry.CombinedTime</div>*@
                        <div class="column stat">@UIManager.FormatTime(entry.Value)</div>
                    </div>
                }
            </div>
            <div class="buttons">
                <div class="button-bg">
                    <div class="button cowboy singular" onclick="@(() => ButtonBack())">
					    @if (Input.UsingController)
					    {
						    <InputGlyph button="Back" />
					    }
                        Back
                    </div>
                </div>
            </div>
        </div>
	</div>
</root>

@code
{
    [Property] public bool isMainMenu { get; set; } = true;
    public bool HasRetrievingStarted = false;
    public DateTime LastRetrievingState = DateTime.Now;
    public LeaderboardGroup ActiveTab = LeaderboardGroup.Global;
    public ILeaderboard Leaderboards = new CombinedTimeLeaderboards();
    private float RefreshRotation = 0;
    private float RefreshYLocation = 0;
    private int row = 0;
    bool isInLevelLeaderboardMode = false;

    string GetMenuClass()
    {
        if (!isMainMenu)
        {
            return "menu bg";
        }
        return "menu translucent-bg";
    }

    protected override void OnUpdate()
    {
        base.OnUpdate();

        if (!HasClass("visible"))
            return;

        if (Input.Pressed("Back"))
        {
            // Done in build hash
            //ButtonBack();
        }
    }

    public void SetupLevelLeaderboard(LevelData level)
    {
        isInLevelLeaderboardMode = true;
        Leaderboards = new LevelLeaderboards();
        Leaderboards.SetContext(level);

        Enabled = true;
        SetClass("visible", true);
        SetClass("invisible", false);

        RetrieveLeaderboard(true);
    }

    public void CloseLevelLeaderboard()
    {
        isInLevelLeaderboardMode = false;
        SetClass("visible", false);
        SetClass("invisible", true);
    }

    public string GetNamedLeaderboardTitle()
    {
        if (Leaderboards?.context != null)
        {            
            return $"{Leaderboards.context.friendlyLevelName} Leaderboards";
        }
        return $"Combined Time Leaderboards";
    }

    public string GetLeaderboardTitle() {
        if (ActiveTab == LeaderboardGroup.MyScore)
        {
            return "My Score";
        }
        return ActiveTab.ToString();
    }

    public bool CanLeaderboardMoveLeft {
        get => true; // Can restrict one day...?
    }

    public bool CanLeaderboardMoveRight {
        get => true; // Can restrict one day...?
    }

    public void MoveLeaderboardLeft() {
        if (ActiveTab == LeaderboardGroup.Global)
        {
            // Move to far right. Will need updating if the enum changes
            ActiveTab = LeaderboardGroup.MyScore;
        }
        else if (ActiveTab == LeaderboardGroup.Friends)
        {
            // Move to far right. Will need updating if the enum changes
            ActiveTab = LeaderboardGroup.Global;
        }
        else if (ActiveTab == LeaderboardGroup.MyScore)
        {
            // Move to far right. Will need updating if the enum changes
            ActiveTab = LeaderboardGroup.Friends;
        }

        HasRetrievingStarted = false;
    }

    public void MoveLeaderboardRight() {
        if (ActiveTab == LeaderboardGroup.Global)
        {
            // Move to far left. Will need updating if the enum changes
            ActiveTab = LeaderboardGroup.Friends;
        }
        else if (ActiveTab == LeaderboardGroup.Friends)
        {
            // Move to far left. Will need updating if the enum changes
            ActiveTab = LeaderboardGroup.MyScore;
        }
        else if (ActiveTab == LeaderboardGroup.MyScore)
        {
            // Move to far left. Will need updating if the enum changes
            ActiveTab = LeaderboardGroup.Global;
        }

        HasRetrievingStarted = false;
    }

    void ButtonBack()
    {
        // I really don't get what's going on with this, MainMenu instance should be null in game and UI Manager on the menu but checking them doesn't seem to work
        if (isMainMenu)
        {
            if (isInLevelLeaderboardMode)
            {
                CloseLevelLeaderboard();
            }
            else if (MainMenu.instance != null)
            {
                MainMenu.instance.SetMenuState(MenuState.Main);
                var soundHandle = Sound.Play("ui.navigate.back");
                soundHandle.TargetMixer = Mixer.FindMixerByName("UI");
            }
        }
        else
        {
            if (UIManager.instance != null)
            {
                UIManager.instance.CloseLeaderboard();
            }
        }
    }

    private void RetrieveLeaderboard(bool forceRefresh = false) {
        if (forceRefresh)
        {
            HasRetrievingStarted = false;
        }
        if (Leaderboards != null && this.Panel.IsVisibleSelf && !HasRetrievingStarted)
        {
            Leaderboards.GetLeaderboard(ActiveTab);
            HasRetrievingStarted = true;
            LastRetrievingState = DateTime.Now;
        }
    }

    protected override void OnEnabled()
    {
        base.OnEnabled();
    }

    /// <summary>
    /// update every second
    /// </summary>
    protected override int BuildHash() {
        var NeedQuickRefresh = false;

        //CheckInputs();

        if (this.Panel.IsVisibleSelf)
        {
            if (!HasRetrievingStarted)
            {
                RetrieveLeaderboard();
            }

            if (Input.Pressed("Previous") && CanLeaderboardMoveLeft) MoveLeaderboardLeft();
            else if (Input.Pressed("Next") && CanLeaderboardMoveRight) MoveLeaderboardRight();
            else if (Input.Pressed("Back")) ButtonBack();
        }


        if (Leaderboards != null)
        {
            if (HasRetrievingStarted && Leaderboards.isRefreshing)
            {
                double TotalTicks = (double)(DateTime.Now.Ticks - LastRetrievingState.Ticks) / (double)TimeSpan.TicksPerMillisecond;
                float MsTicks = (float)((double)TotalTicks % (1.5f * 1000f));
                float Progress = MsTicks / 500f;
                
                RefreshRotation = 360 * MathX.Lerp(0f, 1f, Progress, true);
                RefreshYLocation = -9f * MathX.Lerp(0, 1f, (Progress > 0.5f ? 1 - Progress : Progress), true);

                NeedQuickRefresh = true;
            } else RefreshRotation = 0f;
        }

        row = 0;

        if (NeedQuickRefresh) return System.HashCode.Combine(
            ((double)DateTime.Now.Ticks / TimeSpan.TicksPerMillisecond).ToFixed(2)
        );
        else return System.HashCode.Combine( RealTime.Now.CeilToInt() );
    }

    [Button("Set Combined Time")]
    public void SetCombinedTime()
    {
        GameStats.Set(GameStats.COMBINED_TIME, 99999);
    }
}
