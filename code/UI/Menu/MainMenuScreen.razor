@using Sandbox;
@using Sandbox.UI;
@using System;
@inherits PanelComponent

<root class="menu">
	<div class="title">Shoot or Don't Shoot</div>

	<div class="container">
		<div class="buttons">
			<div class="button-bg">
				<div class="button green" onclick="@(() => ButtonPlay())">Play</div>
				<div class="button yellow" onclick="@(() => ButtonStats())">Stats</div>
				<div class="button blue" onclick="@(() => ButtonLeaderboards())">Leaderboards</div>
				<div class="button brown" onclick="@(() => ButtonHowToPlay())">How to play</div>
				<div class="button red" onclick="@(() => Quit())">Quit</div>
			</div>
		</div>
		<div class="content">
			<!--<div class="input">
				<InputGlyph button="Shoot" />
				<label>Shoot</label>
			</div>
			<div class="input">
				<InputGlyph button="Spare" />
				<label>Spare</label>
			</div>
			<div class="input">
				<InputGlyph button="Select" />
				<label>Select</label>
			</div>
			<div class="input">
				<InputGlyph button="Back" />
				<label>Back</label>
			</div>
			<div class="input">
				<InputGlyph button="Restart" />
				<label>Restart</label>
			</div>
			<div class="input">
				<InputGlyph button="Quit" />
				<label>Quit</label>
			</div>-->
			<!-- Nothing here right now... -->
		</div>
	</div>
</root>

@code
{
	void ButtonPlay()
	{
		// Other gamemodes have been dropped
		//MainMenu.instance.SetMenuState(MenuState.GameMode);

		MainMenu.instance.SetMenuState(MenuState.LevelSelect);
		Sound.Play("ui.button.press");
	}

	void ButtonStats()
	{
		MainMenu.instance.SetMenuState(MenuState.Stats);
		Sound.Play("ui.button.press");
	}

	void ButtonLeaderboards()
	{
		MainMenu.instance.SetMenuState(MenuState.Leaderboards);
		Sound.Play("ui.button.press");
	}

	/*void ButtonSettings()
	{
		MainMenu.instance.SetMenuState(MenuState.Settings);
		Sound.Play("ui.button.press");
	}*/

	void ButtonHowToPlay()
	{
		MainMenu.instance.SetMenuState(MenuState.HowToPlay);
		Sound.Play("ui.button.press");
	}

	void Quit()
	{
		if (Game.IsEditor)
		{
			Log.Info("Quit");
		}
		else
		{
			Game.Close();
		}
	}

	/// <summary>
    /// update every second
    /// </summary>
    protected override int BuildHash() => System.HashCode.Combine( RealTime.Now.CeilToInt() );
}
