@using Sandbox;
@using Sandbox.UI;
@using Sandbox.Services;
@using System;
@inherits PanelComponent
@code {
	string[] levels = {
		"original",
		"original",
		"original",
		"original",
		"original",
		"original",
		"original"
	};
}

<root class="menu">
    <div class="container">
        <div class="content">
	        <div class="title">
		        <span>Levels</span>
	        </div>
			<div class="levels">
				@for (int i = 0; i < levels.Count(); i++)
				{
					<div class="level-button" data-map="@levels[i]" onclick="@((e) => StartLevel(e))">
						<div class="preview">
							@* TODO: Fix the level links so that they start different levels! *@
							<span >@(i + 1)</span>
						</div>
						<label>Level @(i + 1)</label>
					</div>
				}
			</div>
        </div>
    </div>

	<div class="container">
		<div class="buttons">
			<div class="button-bg">
				@* <div class="button green" onclick="@(() => StartGame())">Start</div> *@
				<div class="button red singular" onclick="@(() => ButtonBack())">Back</div>
			</div>
		</div>
	</div>
</root>

@code
{
	void StartLevel(PanelEvent t)
	{
		t.StopPropagation();

		var _event = (MousePanelEvent) t;
		var target = _event.Target;

		while (target != null && target.Parent != null && !target.HasClass("level-button")) {
			//Log.Info(String.Format("Going up {0}, {1}", target, target.Parent));
			target = target.Parent;
		}

		var SceneName = target.GetAttribute("data-map");
		var SceneFilePath = $"scenes/topdown/{SceneName}.scene";

		try
		{
			Game.ActiveScene.LoadFromFile(SceneFilePath);
		}
		catch (Exception ex)
		{
			Log.Error(String.Format("Failed to load from file: {0}", ex.StackTrace));
			Log.Info("Unable to load level because it cannot be found!");
		}
	}

	void ButtonBack()
	{
		// Other gamemodes have been dropped
		//MainMenu.instance.SetMenuState(MenuState.GameMode);

		MainMenu.instance.SetMenuState(MenuState.Main);
		Sound.Play("ui.navigate.back");
	}

	/*void StartGame()
	{
		Game.ActiveScene.LoadFromFile("scenes/original.scene");
	}*/

	void Quit()
	{
		if (Game.IsEditor)
		{
			Log.Info("Quit");
		}
		else
		{
			Game.Close();
		}
	}

	/// <summary>
    /// update every second
    /// </summary>
    protected override int BuildHash() => System.HashCode.Combine( RealTime.Now.CeilToInt() );
}
