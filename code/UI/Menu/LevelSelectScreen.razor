@using Sandbox;
@using Sandbox.UI;
@using Sandbox.Audio;
@using Sandbox.Services;
@using System;
@inherits PanelComponent
@code {
	List<LevelData> levels = GameSettings.instance.topDownLevels;
	Object error = null;
	int currentIndex = 0;
	LevelData level = null;
	MedalType medal = MedalType.None;
}

<root class="menu">
    <div class="container main">
        <div class="content">
	        <div class="title">
		        <span>Play</span>
	        </div>
			<div class="switcher">
				@if (levels == null || levels.Count() == 0)
				{
					error = "Couldn't find any levels (invalid game data)";
					Log.Warning("Could not find any levels. Have you generated GameSettings?");
				}
				else
				{
					currentIndex = Math.Clamp(currentIndex, 0, levels.Count() - 1);
					level = levels[currentIndex];
					medal = level.GetBestMedal();

					<div class="column">
						<span class="arrow prev @(currentIndex < 1 ? "disabled" : "")" onclick="@(() => --currentIndex)">
							<span class="char">
								@* NOTE: Changing this requires specific padding. Make sure to update the SCSS .char property *@
								@* Left White Arrow *@
								@* &#8678; *@
								@* Single Left-Pointing Quotation Mark *@
								@*&lsaquo;*@
								@* Black Right Arrowhead (Flipped in CSS)*@
								&#10148;
							</span>
							<span class="text">Previous</span>
							@if (Input.UsingController)
							{
								<span class="icon"><InputGlyph button="Previous" /></span>
							}
						</span>
					</div>
					<div class="column">
						<div class="level">
							<div class="header">
								<span class="name">@level.friendlyLevelName</span>
								<span class="identifier">
									<span class="id">Level @(currentIndex + 1)</span>
									@*<span class="hyphenator">&mdash;</span>*@
								</span>
							</div>
							<div class="description">@level.friendlyLevelDescription</div>
							<div class="preview">
								<img src=@level.artworkImageData />
							</div>
							<div class="table">
								<div class="row">
									<div class="column">
										<div class="misc">
											<p class="kvp best">
												@if (!(level.GetBestTime() >= float.MaxValue))
												{
													<span class="key" style="width: auto">Best Time: </span>
													<span class="value">@UIManager.FormatTime(level.GetBestTime())</span>
												} else
												{
													<span class="key" style="width: auto"><label> </label></span>
													<span class="value"> </span>
												}
											</p>
											<p class="medals">
												@*<span class="key">Medal: </span>*@
												<span class="value">
													@if (medal == MedalType.None)
													{
														@foreach (var medalIt in Enum.GetValues<MedalType>())
														{
															if (medalIt == MedalType.None) continue;
															// All are disabled.
															<span class="medal @medalIt.ToString()" style="@getMedalStyle(medalIt, false)">
																<img src=@GameSettings.instance.GetMedalImage(medalIt) />
															</span>
														}
													}
													else
													{
														bool completed = true;
														@foreach (var medalIt in Enum.GetValues<MedalType>())
														{
															if (medalIt == MedalType.None) continue;
															<span class="medal @medalIt.ToString()" style="@getMedalStyle(medalIt, completed)">
																<img src=@GameSettings.instance.GetMedalImage(medalIt) />
															</span>
															if (medalIt == medal) {
																// Next have not been achieved
																//break;
																completed = false;
															}
														}
													}
												</span>
											</p>
											<p class="kvp next">
												@if (medal != MedalType.None && !(MathX.AlmostEqual(level.GetNextMedalTime(), 0.0f) || level.GetNextMedalTime() >= float.MaxValue))
												{
													<span class="key" style="width: auto">Next Medal: </span>
													<span class="value">@UIManager.FormatTime(level.GetNextMedalTime())</span>
												}
												else
												{
													@* <span>Pass for Bronze</span> *@
													<span class="key" style="width: auto">Next Medal: </span>
													<span class="value">Pass for Bronze</span>
												}
											</p>
										</div>
									</div>
									<div class="column">
										<div class="misc">
											<p class="kvp civs">
												<span class="key">Maximum Civilian Casualties: </span>
												<span class="value">@(level.allowedCivilianCasualties-1)</span>
											</p>
										</div>
									</div>
								</div>
							</div>
							<div class="buttons">
								<div class="button red" onclick="@(() => StartActiveLevel())">		
									@if (Input.UsingController)
									{
										<span class="icon"><InputGlyph button="Play" /></span>
									}
									Play
								</div>
							</div>
						</div>
					</div>
					<div class="column">
						<span class="arrow next @(currentIndex < levels.Count() - 1 ? "" : "disabled")" onclick="@(() => ++currentIndex)">
							<span class="char">
								@* NOTE: Changing this requires specific padding. Make sure to update the SCSS .char property *@
								@* Right White Arrow *@
								@* &#8680;*@
								@* Single Right-Pointing Quotation Mark *@
								@* &rsaquo; *@
								@* Black Right Arrowhead *@
								&#10148;
							</span>
							<span class="text">Next</span>
							@if (Input.UsingController)
							{
								<span class="icon"><InputGlyph button="Next" /></span>
							}
						</span>
					</div>
				}
			</div>
        </div>
    </div>

	<div class="container controls">
		<div class="buttonsalt">
			<div class="button-group">
				@* <div class="button green" onclick="@(() => StartGame())">Start</div> *@				
				<div class="button cowboy singular" onclick="@(() => ButtonBack(true))">
                    @if (Input.UsingController)
                    {
                        <InputGlyph button="Back" /></span>
                    }
					Back
				</div>			
				<div class="button cowboy singular" style="width: contain" onclick="@(() => OpenLeaderboard())">
                    @if (Input.UsingController)
                    {
                        <InputGlyph button="Leaderboard" /></span>
                    }
					Leaderboard
				</div>
			</div>
		</div>
	</div>
</root>

@code
{
	int timeOffset = 0;
	bool isInLeaderboardMode = false;

	protected override void OnUpdate()
	{
		base.OnUpdate();

		if (MainMenu.instance?.leaderboardsScreen != null && MainMenu.instance.leaderboardsScreen.HasClass("visible"))
		{
			return;
		}

		if (!HasClass("visible"))
		{
			return;
		}

		if (Input.Pressed("Play"))
		{
			StartActiveLevel();
		}

		if (Input.Pressed("Previous"))
		{
			--currentIndex;
			timeOffset++;
		}

		if (Input.Pressed("Next"))
		{
			++currentIndex;
			timeOffset++;
		}

		if (Input.Pressed("Leaderboard"))
		{
			OpenLeaderboard();
		}

		if (Input.Pressed("Back"))
		{
			ButtonBack();
		}
	}

	string getMedalStyle(MedalType medal, bool completed)
	{
		string brightness = "100%";
		string grayscale = "50%";
		string opacity = "1";

		if (!completed)
		{
			brightness = "200%";
			opacity = "0.33";
			grayscale = "75%";
		}

		string width = medal == MedalType.Onyx ? "150" : "100";
		return $"width: {width}px; height: 200px; margin: -35px 0px -55px 0px;opacity: {opacity}; filter: brightness({brightness}); filter: sepia({grayscale});";
	}

	bool StartActiveLevel()
	{
		if (!(level != null && level.scene != null))
		{
			Log.Error("Unable to load level due to invalid GameSettings configuration");
			return false;
		}

		try {
			Game.ActiveScene.Load(level.scene);
		}
		catch (Exception ex)
		{
			Log.Error(String.Format("Unable to load level due to uncaught exception: {0}", ex.StackTrace));
		}
		return true;
	}

	/*void StartLevel(PanelEvent t)
		{
		t.StopPropagation();

		var _event = (MousePanelEvent) t;
		var target = _event.Target;

		while (target != null && target.Parent != null && !target.HasClass("level-button")) {
			//Log.Info(String.Format("Going up {0}, {1}", target, target.Parent));
			target = target.Parent;
		}

		var SceneName = target.GetAttribute("data-map");
		var SceneFilePath = $"scenes/topdown/{SceneName}.scene";

			try
			{
			Game.ActiveScene.LoadFromFile(SceneFilePath);
		}
		catch (Exception ex)
			{
			Log.Error(String.Format("Failed to load from file: {0}", ex.StackTrace));
			Log.Info("Unable to load level because it cannot be found!");
		}
	}*/

	void OpenLeaderboard()
	{
		if (MainMenu.instance.leaderboardsScreen == null)
		{
			Log.Error($"OpenLeaderboard() MainMenu.instance.leaderboardsScreen is null!");
			return;
		}
		MainMenu.instance.leaderboardsScreen.SetupLevelLeaderboard(level);
		isInLeaderboardMode = true;
	}

	void ButtonBack(bool wasClick = false)
	{
		if (!wasClick && isInLeaderboardMode)
		{
			isInLeaderboardMode = false;
			return;
		}
		// Other gamemodes have been dropped
		//MainMenu.instance.SetMenuState(MenuState.GameMode);

		MainMenu.instance.SetMenuState(MenuState.Main);
		var soundHandle = Sound.Play("ui.navigate.back");
		soundHandle.TargetMixer = Mixer.FindMixerByName("UI");
	}

	/*void StartGame()
		{
		Game.ActiveScene.LoadFromFile("scenes/original.scene");
	}*/

	void Quit()
	{
		if (Game.IsEditor)
		{
			Log.Info("Quit");
		}
		else
		{
			Game.Close();
		}
	}

	/// <summary>
	/// update every second
	/// </summary>
	protected override int BuildHash() 
	{
		int time = RealTime.Now.CeilToInt();
		time += timeOffset;
		return System.HashCode.Combine(time);
	}
}
